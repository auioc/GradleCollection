static def getEnvAsBoolean(String name) {
    return System.getenv(name) && System.getenv(name).toBoolean()
}

def getExecOutput(List<String> commands) {
    def out = new ByteArrayOutputStream()
    exec {
        commandLine commands
        standardOutput out
    }
    return out.toString().trim()
}

def isCi = getEnvAsBoolean('CI')
def isGithubActions = isCi && getEnvAsBoolean('GITHUB_ACTIONS')
def hasGit = project.file('.git').isDirectory()

def revision = (() -> {
    if (isGithubActions) {
        return System.getenv('GITHUB_SHA')
    } else if (hasGit) {
        return getExecOutput(['git', 'rev-parse', '--verify', 'HEAD'])
    }
    return 'unknown'
})()
def revisionShort = revision.length() > 8 ? revision.substring(0, 7) : revision
def buildNumber = isGithubActions ? System.getenv('GITHUB_RUN_NUMBER').toInteger() : 0
def isDirty = (!isCi && hasGit) ? !getExecOutput(['git', 'status', '--short']).isEmpty() : false
def isRelease = isGithubActions ? getEnvAsBoolean('IS_RELEASE') : false
def buildInfo = "rev.${revisionShort}-build.${buildNumber}${isRelease ? '' : '-dev'}${isDirty ? '-dirty' : ''}"

project.group = mod_group_id
project.base {
    archivesName = mod_id
}
project.version = getEnvAsBoolean('IS_RELEASE')
    ? "${minecraft_version}-${mod_version}"
    : "${minecraft_version}-${mod_version}-${buildInfo}"

def packageName = "${mod_group_id}.${mod_id}"


def scriptsReversion = getExecOutput(['curl', '--no-progress-meter', "${scripts_url}/reversion"])
if (scriptsReversion.length() != 40) {
    throw new GradleException("Invalid scripts reversion")
}

def template = """
package ${packageName};
public final class BuildInfo {
    public static final String VERSION = "${mod_version}";
    public static final String REVERSION = "${revision}";
    public static final int BUILD_NUMBER = ${buildNumber};
    public static final boolean IS_CI_BUILD = ${isCi};
    public static final boolean IS_RELEASE = ${isRelease};
    public static final boolean IS_DIRTY = ${isDirty};
    public static final String MINECRAFT_VERSION = "${minecraft_version}";
    public static final String NEOFORGE_VERSION = "${neo_version}";
    public static final String BUILD_SCRIPTS_REVERSION = "${scriptsReversion}";
}
"""

file("$buildDir/generated/java").mkdirs()
sourceSets.main.java { srcDir "$buildDir/generated/java" }

task generatedBuildInfo() {
    def generatedJavaDir = "$buildDir/generated/java/${packageName.replace(".", "/")}"
    file(generatedJavaDir).mkdirs()
    file("${generatedJavaDir}/BuildInfo.java").write(template)
    logger.info(template)
    file("$buildDir/tmp").mkdirs()
    file("$buildDir/tmp/artifact-name.txt").write("${project.archivesBaseName}-${minecraft_version}-${mod_version}-${buildInfo}")
}

compileJava.dependsOn generatedBuildInfo
