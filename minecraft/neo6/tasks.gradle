tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(GenerateModuleMetadata).tap {
    configureEach {
        enabled = false // Do not publish dependencies in pom
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

def jarManifest = [
        "Specification-Title": project.modId,
        "Specification-Vendor": "${mod_vendor}",
        "Specification-Version": '1',
        "Implementation-Title": project.modName,
        "Implementation-Version": project.modVersion,
        "Implementation-Vendor" : "${mod_vendor}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "HiMod-Full-Version": "${project.fullVersion}",
    ]
if (project.hasProperty('mixinEnabled') && project.mixinEnabled) {
    jarManifest.TweakClass = 'org.spongepowered.asm.launch.MixinTweaker'
    jarManifest.TweakOrder = 0
    jarManifest.MixinConfigs = "${project.modId}.mixin.json"
}

jar {
    manifest {attributes(jarManifest)}
}
jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    archiveClassifier = 'deobf'
    from sourceSets.main.output
    manifest {attributes(jarManifest)}
}
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    manifest {attributes(jarManifest)}
}
task forgelibJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'forgelib'
    from sourceSets.main.output
    from sourceSets.main.allJava
    manifest {attributes(jarManifest)}
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives forgelibJar
}

tasks.build.dependsOn('sourcesJar', 'deobfJar', 'forgelibJar')

task genUpdateJson() {
    doFirst {
        def j = [
            'homepage': "https://github.com/${github_repo}/releases",
            'promos': [
                    "${minecraft_version}-latest": "${project.modVersion}",
                    "${minecraft_version}-recommended": "${project.modVersion}",
            ]
        ]
        file('tmp').mkdirs()
        var file = file("tmp/${minecraft_version}.json")
        file.write(groovy.json.JsonOutput.toJson(j))
    }
}

task outputProjectFullName() {
    doFirst {
        file('tmp').mkdirs()
        file("tmp/fullname.txt").write("${project.archivesBaseName}-${project.fullVersion}")
    }
}

task copyVSCodeResources (dependsOn: 'processResources', type: Copy) {
    from 'build/resources'
    into 'bin/'
}
// https://github.com/neoforged/NeoGradle/issues/5
// https://github.com/neoforged/NeoGradle/pull/6
